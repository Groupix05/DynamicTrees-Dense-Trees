plugins {
    id "java-library"
    id "eclipse"
    id "idea"
    id "net.neoforged.gradle.userdev" version "7.0.170"
}

tasks.named("wrapper", Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }
    flatDir {
        dir("libs")
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {

    configureEach {
        systemProperty "forge.logging.markers", "REGISTRIES"

        systemProperty "forge.logging.console.level", "debug"

        modSource project.sourceSets.main
    }

    client {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
    }

    server {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        argument "--nogui"
    }

    gameTestServer {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
    }

    data {
        arguments.addAll(
                "--mod", project.mod_id,
                "--all",
                "--output", file("src/generated/resources/").getAbsolutePath(),
                "--existing", file("src/main/resources/").getAbsolutePath(),
                "--existing-mod", "dynamictrees")
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    //NeoForge
    implementation "net.neoforged:neoforge:${neo_version}"

    //DynamicTrees
    implementation "curse.maven:dynamictrees-252818:6611182"
    //implementation "curse.maven:dynamictreesplus-478155:6593943"

    //DynmaicTrees Tools/Utilities
    runtimeOnly "curse.maven:jade-324717:6853386"
    runtimeOnly "curse.maven:roughly-enough-items-310111:6199140"
    runtimeOnly "curse.maven:architectury-api-419699:5786327" // Required by REI
    runtimeOnly "curse.maven:cloth-config-348521:5729127" // Required by REI
    runtimeOnly "curse.maven:suggestion-provider-fix-469647:5598604"
    runtimeOnly "curse.maven:tagtooltips-899941:6418051"
    runtimeOnly "maven.modrinth:cc-tweaked:1.116.1"

    //Other
    runtimeOnly "curse.maven:dense-trees-839316:5540809"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_credits            : mod_credits,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(["META-INF/neoforge.mods.toml"]) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}